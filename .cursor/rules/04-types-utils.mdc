---
description:
globs:
alwaysApply: false
---
# TypeScript Utility Types

The types package contains custom TypeScript utility types that can be used across projects.

## Key Type Definitions

- [Utility.d.ts](mdc:packages/types/Utility.d.ts): Collection of various utility types
- [DistributivePick.d.ts](mdc:packages/types/DistributivePick.d.ts): Distributive version of Pick utility
- [DistributiveOmit.d.ts](mdc:packages/types/DistributiveOmit.d.ts): Distributive version of Omit utility
- [Json.d.ts](mdc:packages/types/Json.d.ts): Types for JSON data
- [Primitive.d.ts](mdc:packages/types/Primitive.d.ts): Types for JavaScript primitives
- [Concrete.d.ts](mdc:packages/types/Concrete.d.ts): Types for concrete (non-abstract) types
- [Nullable.d.ts](mdc:packages/types/Nullable.d.ts): Type for nullable values
- [Arrayable.d.ts](mdc:packages/types/Arrayable.d.ts): Type for values that can be arrays or single items
- [Awaitable.d.ts](mdc:packages/types/Awaitable.d.ts): Type for values that might be promises
- [MaybePromise.d.ts](mdc:packages/types/MaybePromise.d.ts): Type for values that might be promises
- [UnwrapPromise.d.ts](mdc:packages/types/UnwrapPromise.d.ts): Type for unwrapping promises

## String Manipulation Types

- [CamelToSnakeCase.d.ts](mdc:packages/types/CamelToSnakeCase.d.ts): Type for converting camelCase to snake_case
- [KeysToCamelCase.d.ts](mdc:packages/types/KeysToCamelCase.d.ts): Type for converting object keys to camelCase
- [RemoveUnderscoreFirstLetter.d.ts](mdc:packages/types/RemoveUnderscoreFirstLetter.d.ts): Type for removing underscore from the start of identifiers

## Object Manipulation Types

- [Override.d.ts](mdc:packages/types/Override.d.ts): Type for overriding properties in a type
- [extendShape.d.ts](mdc:packages/types/extendShape.d.ts): Type for extending shapes of objects
- [EmptyObject.d.ts](mdc:packages/types/EmptyObject.d.ts): Type for an empty object
- [ExtractNonOptionalKeys.d.ts](mdc:packages/types/ExtractNonOptionalKeys.d.ts): Type for extracting non-optional keys
- [OptionalIfAllPropsOptional.d.ts](mdc:packages/types/OptionalIfAllPropsOptional.d.ts): Makes a type optional if all its properties are optional

## Zod Playground

The [zodPlayground/](mdc:packages/types/zodPlayground) directory contains examples and utilities for using the Zod validation library.
